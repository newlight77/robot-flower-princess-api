name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.13

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi
          poetry install --only dev --no-interaction --no-ansi

      - name: Run unit tests with coverage
        env:
          COVERAGE_FILE: .coverage/.coverage.unit
        run: |
          mkdir -p .coverage
          poetry run pytest -q --cov=src --cov-report=xml:.coverage/coverage-unit.xml tests/unit

      - name: Upload unit coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: |
            .coverage/coverage-unit.xml
            .coverage/.coverage.unit

  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.13

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi
          poetry install --only dev --no-interaction --no-ansi

      - name: Run integration tests with coverage
        env:
          COVERAGE_FILE: .coverage/.coverage.integration
        run: |
          mkdir -p .coverage
          poetry run pytest -q --cov=src --cov-report=xml:.coverage/coverage-integration.xml tests/integration

      - name: Upload integration coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: |
            .coverage/coverage-integration.xml
            .coverage/.coverage.integration

  component:
    name: Component tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.13

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi
          poetry install --only dev --no-interaction --no-ansi

      - name: Run component tests with coverage
        env:
          COVERAGE_FILE: .coverage/.coverage.component
        run: |
          mkdir -p .coverage
          poetry run pytest -q --cov=src --cov-report=xml:.coverage/coverage-component.xml tests/component/test_autoplay_end_to_end.py

      - name: Upload component coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-component
          path: |
            .coverage/coverage-component.xml
            .coverage/.coverage.component

  coverage_quality:
    name: Coverage quality check
    runs-on: ubuntu-latest
    needs: [unit, integration, component]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.13

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi
          poetry install --only dev --no-interaction --no-ansi

      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        with:
          path: coverage-artifacts

      - name: Merge coverage data
        run: |
          ls -la coverage-artifacts || true
          # Move coverage files into .coverage/ directory
          mkdir -p .coverage
          cp coverage-artifacts/coverage/.coverage.* .coverage/ || true
          cp coverage-artifacts/coverage/coverage-*.xml .coverage/ || true
          poetry run coverage combine .coverage/.coverage.* || true
          poetry run coverage xml -o .coverage/coverage-combined.xml
          poetry run coverage report --fail-under=80

      - name: Generate HTML coverage report
        run: |
          poetry run coverage html -d .coverage/coverage_html

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage_html
          path: .coverage/coverage_html

      - name: Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-combined
          path: .coverage/coverage-combined.xml

  lint:
    runs-on: ubuntu-latest
    needs:
      - coverage_quality

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install --only main --no-interaction --no-ansi
        poetry install --only dev --no-interaction --no-ansi

    - name: Run linters
      run: |
        poetry run black --check src/ tests/
        poetry run ruff check src/ tests/
        #poetry run mypy src/

  docker:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v5

    - name: Build Docker image
      run: docker build -t robot-flower-princess:test .

    - name: Test Docker image
      run: |
        docker run -d -p 8000:8000 --name test-api robot-flower-princess:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-api
